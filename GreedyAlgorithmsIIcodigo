#include <iostream>
#include <vector>
using namespace std;

int numOfSubarrays(vector<int>& arr, int k, int threshold) {
    int target = k * threshold; // Umbral basado en el tamaño de la ventana y el threshold
    int window_sum = 0, count = 0;

    // Calcular la suma inicial de los primeros k elementos
    for (int i = 0; i < k; ++i) {
        window_sum += arr[i];
    }

    // Verificar si la primera ventana cumple con el requisito
    if (window_sum >= target) {
        count++;
    }

    // Deslizar la ventana a través del arreglo
    for (int i = k; i < arr.size(); ++i) {
        // Actualizar la suma: sumar el elemento que entra y restar el que sale
        window_sum += arr[i] - arr[i - k];

        // Verificar si la nueva ventana cumple con el requisito
        if (window_sum >= target) {
            count++;
        }
    }

    return count;
}

int main() {
    // Ejemplo 1
    vector<int> arr1 = {2, 2, 2, 2, 5, 5, 5, 8};
    int k1 = 3, threshold1 = 4;
    cout << numOfSubarrays(arr1, k1, threshold1) << endl; // Salida: 3

    // Ejemplo 2
    vector<int> arr2 = {11, 13, 17, 23, 29, 31, 7, 5, 2, 3};
    int k2 = 3, threshold2 = 5;
    cout << numOfSubarrays(arr2, k2, threshold2) << endl; // Salida: 6

    return 0;
}
